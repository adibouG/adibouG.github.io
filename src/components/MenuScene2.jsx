/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ./src/assets/menuScene2.glb --shadows
*/

import React, {useEffect,useLayoutEffect, useRef} from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF, useScroll } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import gsap from 'gsap'
import  menu2 from '../assets/menuScene2.glb'
export function Menu(props) {
  const { scene } = useGLTF(menu2)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  const aboutRef = useRef()
  const homeRef = useRef()
  const expRef = useRef()
  const contactRef = useRef()
  const groupRef = useRef()
  const lightRef = useRef()
  const tl = useRef()
  const scroll = useScroll()
 // const scrollRef = useScroll()
  useEffect(() => {
    clone.traverse((child) => {
      if (child.isMesh) {
        child.castShadow = true
        child.receiveShadow = true
      }
    })
    
    scrollTo(0, 0)
     tl.current = gsap.timeline({
       defaults: {
         duration: 4, fadeIn: 1, ease: "power1.inOut",
       }
     })
    gsap.from(groupRef.current.position, {
      duration : 3,
      z: 20,
    },0 )
  
    // gsap.from(lightRef.current, {
    //   duration : 2,
    //   intensity: 0,
    // }, )
    // tl.current = null

    }, [clone])

    useFrame((state, delta, frame) => {

      //tl.current.progress()
      if (tl.current) tl.current.seek(scroll.offset * tl.current.duration())


/*     let  obj = //state.raycaster.intersectObjects([clone], true)[0] //forEach((obj) => {

       /*console.log(JSON.stringify(obj.object.name))
        if (obj.object.name.toLowerCase().includes('about')) {
          aboutRef.current?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'})
        }
        if (obj.object.name.toLowerCase().includes('home')) {
          homeRef.current?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'})
        }
        if (obj.object.name === 'exp') {
          expRef.current?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'})
        }
        if (obj.object.name === 'contact') {
          contactRef.current?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'})
        }*/
    //  })

    })
  useLayoutEffect(() => {
    tl.current = gsap.timeline(
       {
        scrollTrigger: {
           trigger: groupRef.current,
            start : 'top top',
            end: 'bottom bottom', scrub: true
          }
        }
     ) //{defaults: {duration: 0.6, ease: 'power3.inOut'}})
    tl.current
      .to( groupRef.current.rotation,
        {
          duration: 4,
          y: -(2*Math.PI ) * 0.3,
          scub: 1
         }, 0
        )

    },[])


//    console.log()
  return (
    <group ref={groupRef} {...props} dispose={null}  rotation={[0, Math.PI/2 , 0]}>

      <ambientLight ref={lightRef} intensity={0.21} />
      <spotLight intensity={1.424} decay={2} color="#ffd49d" position={[-2.774, 2.766, -2.9]} rotation={[-2.056, -0.49, -0.175]} target={nodes.Sun.target}>
        <primitive object={nodes.Sun.target} position={[0, 0, -1]} />
      </spotLight>
      <pointLight intensity={0.814} decay={2} color="#cfff83" position={[0.583, 0.313, 0]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={0.165} decay={2} color="#b7c4ff" position={[0.243, 0, -0.345]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={0.814} decay={2} color="#ff1200" position={[-0.268, 0, 0]} rotation={[-Math.PI / 2, 0, 0]} />
      <pointLight intensity={0.814} decay={2} color="#ff00d5" position={[-0.302, -0.365, 0]} rotation={[-Math.PI / 2, 0, 0]} />
      <group>
      <mesh castShadow receiveShadow geometry={nodes.Text_Home.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Home.geometry} material={materials.Material} />
              </group>
      <group>
      <mesh castShadow receiveShadow geometry={nodes.Text_Exp.geometry} material={materials['Material.003']} />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Exp.geometry} material={materials['Material.003']} />
           </group>
      <group>
      <mesh castShadow receiveShadow geometry={nodes.Text_About.geometry} material={materials['Material.002']} />
      <mesh castShadow receiveShadow geometry={nodes.Portal_About.geometry} material={materials['Material.002']} />
              </group>
      <group>
      <mesh castShadow receiveShadow geometry={nodes.TextContact.geometry} material={materials['Material.001']} />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Contact.geometry} material={materials['Material.001']} />
              </group>
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell001.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell002.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell003.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell004.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell005.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell006.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell007.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell008.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell009.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell010.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell011.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell012.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell013.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell014.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell015.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell016.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell017.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell018.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell019.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell020.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell021.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell022.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell023.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell024.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell025.geometry} material={materials.Material} />
    </group>
  )
}

useGLTF.preload(menu2)
