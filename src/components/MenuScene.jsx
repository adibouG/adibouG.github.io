/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ./src/assets/menuScene.glb --shadows 
*/

import React, { useRef, useLayoutEffect, useEffect } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { ScreenQuad, useGLTF, useScroll } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import gsap from 'gsap'
import menu from '../assets/menuScene.glb'

export function Menu2(props) {
  const { scene } = useGLTF(menu)
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const tl = useRef()
  const lightRef = useRef()
  const aboutRef = useRef()
  const homeRef = useRef()
  const expRef = useRef()
  const contactRef = useRef()
  const groupRef = useRef() // 
  const scrl = useScroll() // 

  
  const handleAbout = (e) => {
    console.log('about')
  }
  const handleHome = (e) => {
      e.stopPropagation()
    console.log('home')
 //   homeRef.current?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'nearest'})
  }
  

  useLayoutEffect(() => {
      //tl.current =  gsap.timeline();
      tl.current = tl.current ? tl.current : gsap.timeline();
      if (groupRef.current){  

          tl.current.to (
            groupRef.current.rotation,
            { 
              duration: 4,
              y: - Math.PI * 1.5,
              scrub: 1 
            }, "<1"
            
          )
        
          .to (
            groupRef.current.position,
            { 
              duration: 1,
              y: 2.5,
              x: 2,
              scrub: 1  
            },
            0
          )
          .to (
            groupRef.current.rotation,
            { 
              duration: 0.5,
              x: +Math.PI / 12,
              y: -Math.PI / 12,
              scrub: 1  
            },
            0.5
          )
          .to (
            groupRef.current.position,
            { 
              duration: 1,
              y: 2.5,
              x: -2,
              scrub: 1  
            },
            1
          )
          .to (
            groupRef.current.position,
            { 
              duration: 1,
              y: -2.5,
              x: 2,
              scrub: 1  
            },
            2
          )
          .to (
            groupRef.current.rotation,
            { 
              duration: 0.5,
              x: -Math.PI / 12,
              y: -Math.PI / 12,
              scrub: 1  
            },
            2.5
          )
          
          // .to (
          //   groupRef.current.rotation,
          //   { 
          //     duration: 1,
          //     x: -Math.PI / 12,
          //     scrub: 1  
          //   },
          //   0
          // )

      }
  }, [])

  useEffect(() => {
   // tl.current = tl.current ? tl.current : gsap.timeline();
   clone.traverse((child) => {
    if (child.isMesh) {
      child.castShadow = true
      child.receiveShadow = true
    }
  })

  gsap.from(groupRef.current.position, {
    duration : 1,
    z: 20,
  })

  gsap.from(lightRef.current, {
    duration : 4,
    intensity: 0,
  })


  }, [])

useFrame((state, delta, frame) => {

  //tl.current.progress()

  console.log(scrl.offset)
  console.log(tl.current.progress())
  tl.current.seek(scrl.offset * tl.current.duration())
})  



  return (

    <>
   
    <group {...props} dispose={null} rotation-y={Math.PI/2} ref={groupRef}  position={[0, 0, 0]} >
      {/* <spotLight intensity={0} angle={0.41} decay={2} color="#ffd49d" position={[-5.774, 4.766, -5.9]} rotation={[-2.056, -0.49, -0.175]} target={nodes.Sun.target}>
        <primitive object={nodes.Sun.target} position={[0, 0, -1]} />
      </spotLight>  */}
      {/* <pointLight intensity={0.75} color="#cfff83" position={[0, 0, 0]}  />
      <pointLight intensity={0.75} color="#cfff83" position={[0, 0, 0]}  />
      <pointLight intensity={0.5} color="#ff1200" position={[-0, 0, 0]}  />
      <pointLight intensity={0.5} color="#ff00d5" position={[-0, 0, 0]}  />
      */}
   
      
   
     <group ref={expRef}  scale-z={1}>
       <mesh castShadow receiveShadow geometry={nodes.Text_Exp.geometry} material={materials['Material.003']} />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Exp.geometry} material={materials['Material.003']} />

     </group>
     <group ref={homeRef} scale-z={1}  onPointerEnter={(e) => handleHome(e)}>
       <mesh castShadow receiveShadow geometry={nodes.Text_Home.geometry} material={materials["Material"]}  />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Home.geometry} material={materials["Material"]} />

     </group>
     <group  ref={aboutRef}  scale-z={1} onPointerEnter={(e) => handleAbout(e)}>
      <mesh castShadow receiveShadow geometry={nodes.Text_About.geometry} material={materials['Material.002']}  material-color="#ff00d5"/>
      <mesh castShadow receiveShadow geometry={nodes.Portal_About.geometry} material={materials['Material.002']} />

     </group>
     <group>
      <mesh castShadow receiveShadow geometry={nodes.TextContact.geometry} material={materials['Material.001']}  material-color="#b7c4ff" />
      <mesh castShadow receiveShadow geometry={nodes.Portal_Contact.geometry} material={materials['Material.001']} />

     </group >
     <group>

      <mesh castShadow receiveShadow geometry={nodes.Cube_cell.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell001.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell002.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell003.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell004.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell005.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell006.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell007.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell008.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell009.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell010.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell011.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell012.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell013.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell014.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell015.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell016.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell017.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell018.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell019.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell020.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell021.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell022.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell023.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell024.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_cell025.geometry} material={materials.Material} />
     </group>
    </group>
     </>
  )
}

useGLTF.preload(menu)
